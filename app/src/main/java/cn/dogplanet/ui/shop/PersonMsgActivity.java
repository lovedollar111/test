package cn.dogplanet.ui.shop;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.WindowManager;import android.widget.Button;import android.widget.GridView;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import cn.dogplanet.GlobalContext;import cn.dogplanet.R;import cn.dogplanet.app.util.ComUtils;import cn.dogplanet.app.util.GsonHelper;import cn.dogplanet.app.util.IdcardUtils;import cn.dogplanet.app.util.StringUtils;import cn.dogplanet.app.util.ToastUtil;import cn.dogplanet.app.widget.EditTextWithDel;import cn.dogplanet.app.widget.niftymodaldialogeffects.NiftyDialogBuilder;import cn.dogplanet.base.BaseActivity;import cn.dogplanet.constant.HttpUrl;import cn.dogplanet.constant.WCache;import cn.dogplanet.entity.CartResp;import cn.dogplanet.entity.CartResp.Cart;import cn.dogplanet.entity.Expert;import cn.dogplanet.entity.OrderPayResp;import cn.dogplanet.entity.ShopBuyDetail;import cn.dogplanet.net.PublicReq;import cn.dogplanet.net.volley.Response;import cn.dogplanet.net.volley.VolleyError;import cn.dogplanet.ui.shop.adapter.ShopBuyAdapter;/** * 联系人信息 * editor:ztr * package_name:cn.dogplanet.ui.shop * file_name:PersonMsgActivity.java * date:2016-12-6 */public class PersonMsgActivity extends BaseActivity implements OnClickListener {    private Expert expert;    private EditTextWithDel et_name, et_phone, et_idcard;    private LinearLayout lay_idcard;    private ShopBuyAdapter adapter;    private String type;    private List<Cart> product;    private ArrayList<String> proId;    final SimpleDateFormat formatter_num = new SimpleDateFormat("yyyy-MM-dd");    final SimpleDateFormat formatter = new SimpleDateFormat("yyyy年MM月dd日");    private String finish_date;    private String num = "1";    private String chk_id = "";    private String price;    private String category;    private String imgUrls;    private String name;    protected boolean canBuy = true;    private String version_number;    private GridView gridView;    private String select = "1";    private NiftyDialogBuilder builder;    public static Intent newIntent() {        return new Intent(GlobalContext.getInstance(),                PersonMsgActivity.class);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        // TODO Auto-generated method stub        super.onCreate(savedInstanceState);        setContentView(R.layout.person_msg);        expert = WCache.getCacheExpert();        PackageManager pm = getPackageManager();        PackageInfo pi;        try {            pi = pm.getPackageInfo(getPackageName(),                    PackageManager.GET_ACTIVITIES);            version_number = pi.versionName == null ? "null" : pi.versionName;        } catch (NameNotFoundException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        initView();    }    private void initView() {        // TODO Auto-generated method stub        View view = LayoutInflater.from(getApplicationContext()).inflate(                R.layout.listview_head, null);        et_name = view.findViewById(R.id.et_name);        et_phone = view.findViewById(R.id.et_phone);        ListView listView = this.findViewById(R.id.shop_list);        listView.addHeaderView(view);        adapter = new ShopBuyAdapter(getApplicationContext());        listView.setAdapter(adapter);        Button btn_pay = findViewById(R.id.btn_pay);        btn_pay.setOnClickListener(this);        ImageButton btn_back = this.findViewById(R.id.btn_back);        TextView tv_price = this.findViewById(R.id.price);        if (type.equals("1")) {            tv_price.setText(String.format("%d", Integer.parseInt(price) * Integer.parseInt(num)));        } else {            tv_price.setText(price);        }        btn_back.setOnClickListener(this);        if (type.equals("1")) {            ShopBuyDetail buyDetail = new ShopBuyDetail();            buyDetail.setChild_name(name);            buyDetail.setMain_name(name);            buyDetail.setImgUrl(imgUrls);            buyDetail.setPrice(price);            buyDetail.setNum(num);            buyDetail.setTime(finish_date);            adapter.add(buyDetail);        }        et_idcard = view.findViewById(R.id.et_idcard);        lay_idcard = view.findViewById(R.id.lay_idcard);    }    @Override    public void onClick(View v) {        // TODO Auto-generated method stub        if (v.getId() == R.id.btn_pay) {            String etName = et_name.getText().toString();            String etPhone = et_phone.getText().toString();            String etIdcard = et_idcard.getText().toString();            if (StringUtils.isBlank(etName)) {                ToastUtil.showError(R.string.user_input_name_tip);                return;            }            if (ComUtils.compileExChar(etName)) {                ToastUtil.showError("请输入正确的姓名");                return;            }            if (StringUtils.isBlank(etPhone)) {                ToastUtil.showError("请输入手机号");                return;            }            if (select.equals("1") && !ComUtils.isMobileNo(etPhone)) {                ToastUtil.showError(R.string.tip_phone);                return;            }            if (!canBuy) {                ToastUtil.showError("根据森林公园景区限制，需要在4：20之前购买当天产品~");                return;            }            if (lay_idcard.getVisibility() == View.VISIBLE) {                if (!IdcardUtils.validateCard(etIdcard)) {                    ToastUtil.showError(R.string.user_input_card_tip);                    return;                }            }            if ("1".equals(type)) {                createOrder();            } else {                createOrderByCart();            }        } else if (v.getId() == R.id.btn_back) {            getWindow().setSoftInputMode(                    WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);            finish();        }    }    private void createOrder() {        if (null != expert) {            Map<String, String> params = new HashMap<>();            params.put("expert_id", expert.getId().toString());            params.put("access_token", expert.getAccess_token());            // 订单来源 ios ：10 ，android：20            params.put("source", "20");            params.put("pro_id", chk_id);            params.put("category", category);            final String url;            url = HttpUrl.CREATE_ORDER;            // 下单方式 直接下单：1 ，购物车下单：2            params.put("type", type);            params.put("num", num);            params.put("price", price);            params.put("begin_date", finish_date);            params.put("finish_date", finish_date);            params.put("name", et_name.getText().toString());            params.put("phone", et_phone.getText().toString());            if (lay_idcard.getVisibility() == View.VISIBLE) {                params.put("id_card", et_idcard.getText().toString());            }            params.put("version_number", version_number);            showProgress();            PublicReq.request(url, new Response.Listener<String>() {                @Override                public void onResponse(String response) {                    hideProgress();                    OrderPayResp respData = GsonHelper.parseObject(response,                            OrderPayResp.class);                    if (null != respData) {                        if (respData.isSuccess()) {                            startActivity(ShopProductPayActivity                                    .newIntent(respData.getOrder().getId()));                        } else {                            ToastUtil.showError(respData.getMsg());                        }                    } else {                        ToastUtil.showError(R.string.network_data_error);                    }                }            }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    hideProgress();                    ToastUtil.showError(R.string.network_error);                }            }, params);        }    }    private void createOrderByPackage() {        if (null != expert) {            Map<String, String> params = new HashMap<>();            params.put("expert_id", expert.getId().toString());            params.put("access_token", expert.getAccess_token());            // 订单来源 ios ：10 ，android：20            params.put("source", "20");            params.put("pack_id", chk_id);            final String url;            url = HttpUrl.SAVE_PACKAGE_ORDER;            params.put("num", num);            params.put("begin_date", finish_date);            params.put("finish_date", finish_date);            params.put("contact_name", et_name.getText().toString());            params.put("contact_tel", et_phone.getText().toString());            if (lay_idcard.getVisibility() == View.VISIBLE) {                params.put("id_card", et_idcard.getText().toString());            }            params.put("version_number", version_number);            showProgress();            PublicReq.request(url, new Response.Listener<String>() {                @Override                public void onResponse(String response) {                    hideProgress();                    OrderPayResp respData = GsonHelper.parseObject(response,                            OrderPayResp.class);                    if (null != respData) {                        if (respData.isSuccess()) {                            if (url.equals(HttpUrl.SAVE_PACKAGE_ORDER)) {                                startActivity(ShopProductPayActivity                                        .newIntent(respData.getOrder().getId()));                            }                        } else {                            ToastUtil.showError(respData.getMsg());                        }                    } else {                        ToastUtil.showError(R.string.network_data_error);                    }                }            }, new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    hideProgress();                    ToastUtil.showError(R.string.network_error);                }            }, params);        }    }    private void createOrderByCart() {        if (null != expert) {            Map<String, String> params = new HashMap<>();            params.put("expert_id", expert.getId().toString());            params.put("access_token", expert.getAccess_token());            int s = product.size();            for (int i = 0; i < s; i++) {                params.put("id[" + i + "]", product.get(i).getId());            }            params.put("source", "20");            // 下单方式 直接下单：1 ，购物车下单：2            params.put("type", "2");            params.put("name", et_name.getText().toString());            params.put("phone", et_phone.getText().toString());            if (lay_idcard.getVisibility() == View.VISIBLE) {                params.put("id_card", et_idcard.getText().toString());            }            params.put("version_number", version_number);            params.put("area_id", select);            showProgress();            PublicReq.request(HttpUrl.CREATE_CART_ORDER,                    new Response.Listener<String>() {                        @Override                        public void onResponse(String response) {                            hideProgress();                            OrderPayResp respData = GsonHelper.parseObject(                                    response, OrderPayResp.class);                            if (null != respData) {                                if (respData.isSuccess()) {                                    startActivity(ShopProductPayActivity                                            .newIntent(respData.getOrder()                                                    .getId()));                                } else {                                    ToastUtil.showError(respData.getMsg());                                }                            } else {                                ToastUtil                                        .showError(R.string.network_data_error);                            }                        }                    }, new Response.ErrorListener() {                        @Override                        public void onErrorResponse(VolleyError error) {                            hideProgress();                            ToastUtil.showError(R.string.network_error);                        }                    }, params);        }    }    private void getCartData() {        if (null != expert) {            Map<String, String> params = new HashMap<>();            params.put("expert_id", expert.getId().toString());            params.put("access_token", expert.getAccess_token());            showProgress();            PublicReq.request(HttpUrl.GET_CART_PRODUCT,                    new Response.Listener<String>() {                        @Override                        public void onResponse(String response) {                            hideProgress();                            CartResp respData = GsonHelper.parseObject(                                    response, CartResp.class);                            if (null != respData) {                                product.clear();                                if (respData.isSuccess()) {                                    for (int i = 0; i < proId.size(); i++) {                                        for (int j = 0; j < respData                                                .getProduct().size(); j++) {                                            if (respData.getProduct().get(j)                                                    .getId()                                                    .equals(proId.get(i))) {                                                product.add(respData                                                        .getProduct().get(j));                                                Cart cart = respData                                                        .getProduct().get(j);                                                ShopBuyDetail buyDetail = new ShopBuyDetail();                                                buyDetail.setChild_name(cart                                                        .getName());                                                buyDetail.setMain_name(cart                                                        .getName());                                                buyDetail.setPrice(cart                                                        .getPrice());                                                buyDetail.setNum(cart.getNum());                                                buyDetail.setTime(cart                                                        .getFinish_date());                                                buyDetail.setImgUrl(cart                                                        .getThumb());                                                try {                                                    Date parse = formatter_num.parse(cart                                                            .getFinish_date());                                                    Calendar calendar = Calendar.getInstance();                                                    calendar.setTime(parse);                                                    if (Calendar.getInstance().get(Calendar.DAY_OF_MONTH)                                                            == calendar.get(Calendar.DAY_OF_MONTH)                                                            && cart.getPoi_id()                                                            .equals("10")) {                                                        if (Calendar.getInstance().get(Calendar.HOUR_OF_DAY) > 16                                                                || (Calendar.getInstance().get(Calendar.HOUR_OF_DAY) == 16                                                                && Calendar.getInstance().get(Calendar.MINUTE) >= 20)) {                                                            canBuy = false;                                                        }                                                    }                                                } catch (ParseException e) {                                                    // TODO Auto-generated catch                                                    // block                                                    e.printStackTrace();                                                }                                                adapter.add(buyDetail);                                            }                                        }                                    }                                } else {                                    ToastUtil.showError(respData.getMsg());                                }                            } else {                                ToastUtil                                        .showError(R.string.network_data_error);                            }                        }                    }, new Response.ErrorListener() {                        @Override                        public void onErrorResponse(VolleyError error) {                            hideProgress();                            ToastUtil.showError(R.string.network_error);                        }                    }, params);        }    }}