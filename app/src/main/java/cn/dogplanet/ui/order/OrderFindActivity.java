package cn.dogplanet.ui.order;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.view.WindowManager;import android.view.inputmethod.EditorInfo;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.EditText;import android.widget.ListView;import android.widget.TextView;import android.widget.TextView.OnEditorActionListener;import java.util.HashMap;import java.util.List;import java.util.Map;import cn.dogplanet.GlobalContext;import cn.dogplanet.R;import cn.dogplanet.app.util.GsonHelper;import cn.dogplanet.app.util.ToastUtil;import cn.dogplanet.app.widget.library.PullToRefreshListView;import cn.dogplanet.base.BaseFragmentActivity;import cn.dogplanet.constant.HttpUrl;import cn.dogplanet.constant.WCache;import cn.dogplanet.entity.Expert;import cn.dogplanet.entity.Order;import cn.dogplanet.entity.OrderResp;import cn.dogplanet.net.PublicReq;import cn.dogplanet.net.volley.Response;import cn.dogplanet.net.volley.VolleyError;import cn.dogplanet.ui.order.adapter.OrderAdapter;import cn.dogplanet.app.widget.library.PullToRefreshBase;import cn.dogplanet.app.widget.library.PullToRefreshBase.Mode;import cn.dogplanet.app.widget.library.PullToRefreshBase.OnRefreshListener2;import cn.dogplanet.app.widget.library.PullToRefreshListView;import cn.dogplanet.app.util.PullToRefreshHelper;/** * 订单查询 * editor:ztr * package_name:cn.dogplanet.ui.order * file_name:OrderFindActivity.java * date:2016-12-6 */public class OrderFindActivity extends BaseFragmentActivity implements		OnClickListener {	private PullToRefreshListView listView;	private OrderAdapter adapter;	private EditText editText;	private TextView tv_tip;	private Expert expert;	private int current_page = 1;	private Boolean isFirst = true;	public static Intent newIntent() {		return new Intent(GlobalContext.getInstance(),				OrderFindActivity.class);	}	@Override	protected void onCreate(Bundle savedInstanceState) {	 	// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		setContentView(R.layout.order_find);		expert = WCache.getCacheExpert();		initView();	}		@Override	protected void onResume() {		// TODO Auto-generated method stub		super.onResume();		if(isFirst){			getWindow().setSoftInputMode(					WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);			isFirst=false;		}else{			getWindow().setSoftInputMode(					WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);		}	}	private void initView() {		// TODO Auto-generated method stub		this.findViewById(R.id.btn_back).setOnClickListener(this);		listView = (PullToRefreshListView) this.findViewById(R.id.list);		listView.setMode(Mode.BOTH);		PullToRefreshHelper.initIndicator(listView);		PullToRefreshHelper.initIndicatorStart(listView);		listView.setOnRefreshListener(new OnRefreshListener2<ListView>() {			@Override			public void onPullDownToRefresh(					PullToRefreshBase<ListView> refreshView) {				// TODO Auto-generated method stub				refershData();			}			@Override			public void onPullUpToRefresh(					PullToRefreshBase<ListView> refreshView) {				// TODO Auto-generated method stub				current_page++;				getOrder(HttpUrl.SEARCH_ORDER, editText.getText()						.toString(), 2);			}		});		listView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> parent, View view,					int position, long id) {				Order order = (Order) parent.getAdapter().getItem(position);				startActivity(OrderDetailActivity.newIntent());			}		});		editText = (EditText) this.findViewById(R.id.editText);		tv_tip = (TextView) this.findViewById(R.id.tv_tip);		editText.setOnEditorActionListener(new OnEditorActionListener() {			@Override			public boolean onEditorAction(TextView v, int actionId,					KeyEvent event) {				// TODO Auto-generated method stub				if (actionId == EditorInfo.IME_ACTION_SEARCH						|| actionId == EditorInfo.IME_ACTION_UNSPECIFIED) {					getOrder(HttpUrl.SEARCH_ORDER, editText.getText()							.toString(), 1);					editText.clearFocus();				}				return false;			}		});	}	public void refershData() {		if (null != adapter && null != adapter.getOrders()) {			adapter.getOrders().clear();			adapter.notifyDataSetChanged();		}		current_page = 1;		getOrder(HttpUrl.SEARCH_ORDER, editText.getText().toString(), 1);	}	private void getOrder(final String url, String s, final int type) {		if (null != expert) {			Map<String, String> params = new HashMap<>();			params.put("expert_id", expert.getId().toString());			params.put("access_token", expert.getAccess_token());			params.put("keyword", s);			params.put("page_id", String.format("%d", current_page));			PublicReq.request(url, new Response.Listener<String>() {				@Override				public void onResponse(String response) {					// System.out.println(response);					listView.onRefreshComplete();					InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);					imm.hideSoftInputFromWindow(editText.getWindowToken(), 0);					OrderResp respData = GsonHelper.parseObject(response,							OrderResp.class);					if (null != respData) {						if (respData.isSuccess()) {							if (type == 1 && adapter != null) {								adapter.getOrders().clear();								adapter.notifyDataSetChanged();							}							notifyAdapter(respData.getOrder());						} else {							ToastUtil.showError(respData.getMsg());						}					} else {						ToastUtil.showError(R.string.network_data_error);					}				}			}, new Response.ErrorListener() {				@Override				public void onErrorResponse(VolleyError error) {					listView.onRefreshComplete();					getWindow()							.setSoftInputMode(									WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);					ToastUtil.showError(R.string.network_error);				}			}, params);		}	}	private void notifyAdapter(List<Order> orders) {		if (orders == null || orders.size() == 0) {			tv_tip.setVisibility(View.VISIBLE);			listView.setVisibility(View.GONE);		} else {			tv_tip.setVisibility(View.GONE);			listView.setVisibility(View.VISIBLE);		}		if (null == adapter) {			adapter = new OrderAdapter(getApplicationContext(), orders, 1);			listView.setAdapter(adapter);			adapter.notifyDataSetChanged();		} else {			if (orders != null) {				adapter.getOrders().addAll(orders);			}			adapter.notifyDataSetChanged();		}	}	@Override	public void onClick(View v) {		// TODO Auto-generated method stub		switch (v.getId()) {		case R.id.btn_back:			finish();			break;		default:			break;		}	}}